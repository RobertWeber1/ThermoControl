ARM GAS  /tmp/ccgG6lCU.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32g0xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	NMI_Handler
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	NMI_Handler:
  25              	.LFB417:
  26              		.file 1 "Core/Src/stm32g0xx_it.c"
   1:Core/Src/stm32g0xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32g0xx_it.c **** /**
   3:Core/Src/stm32g0xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32g0xx_it.c ****   * @file    stm32g0xx_it.c
   5:Core/Src/stm32g0xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32g0xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32g0xx_it.c ****   * @attention
   8:Core/Src/stm32g0xx_it.c ****   *
   9:Core/Src/stm32g0xx_it.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/stm32g0xx_it.c ****   * All rights reserved.</center></h2>
  11:Core/Src/stm32g0xx_it.c ****   *
  12:Core/Src/stm32g0xx_it.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/stm32g0xx_it.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/stm32g0xx_it.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/stm32g0xx_it.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/stm32g0xx_it.c ****   *
  17:Core/Src/stm32g0xx_it.c ****   ******************************************************************************
  18:Core/Src/stm32g0xx_it.c ****   */
  19:Core/Src/stm32g0xx_it.c **** /* USER CODE END Header */
  20:Core/Src/stm32g0xx_it.c **** 
  21:Core/Src/stm32g0xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/stm32g0xx_it.c **** #include "main.h"
  23:Core/Src/stm32g0xx_it.c **** #include "stm32g0xx_it.h"
  24:Core/Src/stm32g0xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/stm32g0xx_it.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/stm32g0xx_it.c **** /* USER CODE END Includes */
  27:Core/Src/stm32g0xx_it.c **** 
  28:Core/Src/stm32g0xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/stm32g0xx_it.c **** /* USER CODE BEGIN TD */
  30:Core/Src/stm32g0xx_it.c **** 
  31:Core/Src/stm32g0xx_it.c **** /* USER CODE END TD */
  32:Core/Src/stm32g0xx_it.c **** 
ARM GAS  /tmp/ccgG6lCU.s 			page 2


  33:Core/Src/stm32g0xx_it.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/stm32g0xx_it.c **** /* USER CODE BEGIN PD */
  35:Core/Src/stm32g0xx_it.c **** 
  36:Core/Src/stm32g0xx_it.c **** /* USER CODE END PD */
  37:Core/Src/stm32g0xx_it.c **** 
  38:Core/Src/stm32g0xx_it.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/stm32g0xx_it.c **** /* USER CODE BEGIN PM */
  40:Core/Src/stm32g0xx_it.c **** 
  41:Core/Src/stm32g0xx_it.c **** /* USER CODE END PM */
  42:Core/Src/stm32g0xx_it.c **** 
  43:Core/Src/stm32g0xx_it.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/stm32g0xx_it.c **** /* USER CODE BEGIN PV */
  45:Core/Src/stm32g0xx_it.c **** 
  46:Core/Src/stm32g0xx_it.c **** /* USER CODE END PV */
  47:Core/Src/stm32g0xx_it.c **** 
  48:Core/Src/stm32g0xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  49:Core/Src/stm32g0xx_it.c **** /* USER CODE BEGIN PFP */
  50:Core/Src/stm32g0xx_it.c **** 
  51:Core/Src/stm32g0xx_it.c **** /* USER CODE END PFP */
  52:Core/Src/stm32g0xx_it.c **** 
  53:Core/Src/stm32g0xx_it.c **** /* Private user code ---------------------------------------------------------*/
  54:Core/Src/stm32g0xx_it.c **** /* USER CODE BEGIN 0 */
  55:Core/Src/stm32g0xx_it.c **** 
  56:Core/Src/stm32g0xx_it.c **** /* USER CODE END 0 */
  57:Core/Src/stm32g0xx_it.c **** 
  58:Core/Src/stm32g0xx_it.c **** /* External variables --------------------------------------------------------*/
  59:Core/Src/stm32g0xx_it.c **** extern ADC_HandleTypeDef hadc1;
  60:Core/Src/stm32g0xx_it.c **** extern SPI_HandleTypeDef hspi1;
  61:Core/Src/stm32g0xx_it.c **** extern SPI_HandleTypeDef hspi2;
  62:Core/Src/stm32g0xx_it.c **** extern TIM_HandleTypeDef htim1;
  63:Core/Src/stm32g0xx_it.c **** /* USER CODE BEGIN EV */
  64:Core/Src/stm32g0xx_it.c **** 
  65:Core/Src/stm32g0xx_it.c **** /* USER CODE END EV */
  66:Core/Src/stm32g0xx_it.c **** 
  67:Core/Src/stm32g0xx_it.c **** /******************************************************************************/
  68:Core/Src/stm32g0xx_it.c **** /*           Cortex-M0+ Processor Interruption and Exception Handlers          */
  69:Core/Src/stm32g0xx_it.c **** /******************************************************************************/
  70:Core/Src/stm32g0xx_it.c **** /**
  71:Core/Src/stm32g0xx_it.c ****   * @brief This function handles Non maskable interrupt.
  72:Core/Src/stm32g0xx_it.c ****   */
  73:Core/Src/stm32g0xx_it.c **** void NMI_Handler(void)
  74:Core/Src/stm32g0xx_it.c **** {
  27              		.loc 1 74 1 view -0
  28              		.cfi_startproc
  29              		@ Volatile: function does not return.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.L2:
  75:Core/Src/stm32g0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  76:Core/Src/stm32g0xx_it.c **** 
  77:Core/Src/stm32g0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  78:Core/Src/stm32g0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  79:Core/Src/stm32g0xx_it.c ****   while (1)
  34              		.loc 1 79 3 discriminator 1 view .LVU1
  35              		.loc 1 79 3 discriminator 1 view .LVU2
  36 0000 FEE7     		b	.L2
ARM GAS  /tmp/ccgG6lCU.s 			page 3


  37              		.cfi_endproc
  38              	.LFE417:
  40              		.section	.text.HardFault_Handler,"ax",%progbits
  41              		.align	1
  42              		.global	HardFault_Handler
  43              		.syntax unified
  44              		.code	16
  45              		.thumb_func
  46              		.fpu softvfp
  48              	HardFault_Handler:
  49              	.LFB418:
  80:Core/Src/stm32g0xx_it.c ****   {
  81:Core/Src/stm32g0xx_it.c ****   }
  82:Core/Src/stm32g0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  83:Core/Src/stm32g0xx_it.c **** }
  84:Core/Src/stm32g0xx_it.c **** 
  85:Core/Src/stm32g0xx_it.c **** /**
  86:Core/Src/stm32g0xx_it.c ****   * @brief This function handles Hard fault interrupt.
  87:Core/Src/stm32g0xx_it.c ****   */
  88:Core/Src/stm32g0xx_it.c **** void HardFault_Handler(void)
  89:Core/Src/stm32g0xx_it.c **** {
  50              		.loc 1 89 1 view -0
  51              		.cfi_startproc
  52              		@ Volatile: function does not return.
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              		@ link register save eliminated.
  56              	.L4:
  90:Core/Src/stm32g0xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  91:Core/Src/stm32g0xx_it.c **** 
  92:Core/Src/stm32g0xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  93:Core/Src/stm32g0xx_it.c ****   while (1)
  57              		.loc 1 93 3 discriminator 1 view .LVU4
  58              		.loc 1 93 3 discriminator 1 view .LVU5
  59 0000 FEE7     		b	.L4
  60              		.cfi_endproc
  61              	.LFE418:
  63              		.section	.text.SVC_Handler,"ax",%progbits
  64              		.align	1
  65              		.global	SVC_Handler
  66              		.syntax unified
  67              		.code	16
  68              		.thumb_func
  69              		.fpu softvfp
  71              	SVC_Handler:
  72              	.LFB419:
  94:Core/Src/stm32g0xx_it.c ****   {
  95:Core/Src/stm32g0xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  96:Core/Src/stm32g0xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  97:Core/Src/stm32g0xx_it.c ****   }
  98:Core/Src/stm32g0xx_it.c **** }
  99:Core/Src/stm32g0xx_it.c **** 
 100:Core/Src/stm32g0xx_it.c **** /**
 101:Core/Src/stm32g0xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 102:Core/Src/stm32g0xx_it.c ****   */
 103:Core/Src/stm32g0xx_it.c **** void SVC_Handler(void)
 104:Core/Src/stm32g0xx_it.c **** {
ARM GAS  /tmp/ccgG6lCU.s 			page 4


  73              		.loc 1 104 1 view -0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              		@ link register save eliminated.
 105:Core/Src/stm32g0xx_it.c ****   /* USER CODE BEGIN SVC_IRQn 0 */
 106:Core/Src/stm32g0xx_it.c **** 
 107:Core/Src/stm32g0xx_it.c ****   /* USER CODE END SVC_IRQn 0 */
 108:Core/Src/stm32g0xx_it.c ****   /* USER CODE BEGIN SVC_IRQn 1 */
 109:Core/Src/stm32g0xx_it.c **** 
 110:Core/Src/stm32g0xx_it.c ****   /* USER CODE END SVC_IRQn 1 */
 111:Core/Src/stm32g0xx_it.c **** }
  78              		.loc 1 111 1 is_stmt 0 view .LVU7
  79              		@ sp needed
  80 0000 7047     		bx	lr
  81              		.cfi_endproc
  82              	.LFE419:
  84              		.section	.text.PendSV_Handler,"ax",%progbits
  85              		.align	1
  86              		.global	PendSV_Handler
  87              		.syntax unified
  88              		.code	16
  89              		.thumb_func
  90              		.fpu softvfp
  92              	PendSV_Handler:
  93              	.LFB420:
 112:Core/Src/stm32g0xx_it.c **** 
 113:Core/Src/stm32g0xx_it.c **** /**
 114:Core/Src/stm32g0xx_it.c ****   * @brief This function handles Pendable request for system service.
 115:Core/Src/stm32g0xx_it.c ****   */
 116:Core/Src/stm32g0xx_it.c **** void PendSV_Handler(void)
 117:Core/Src/stm32g0xx_it.c **** {
  94              		.loc 1 117 1 is_stmt 1 view -0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              		@ link register save eliminated.
 118:Core/Src/stm32g0xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 119:Core/Src/stm32g0xx_it.c **** 
 120:Core/Src/stm32g0xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 121:Core/Src/stm32g0xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 122:Core/Src/stm32g0xx_it.c **** 
 123:Core/Src/stm32g0xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 124:Core/Src/stm32g0xx_it.c **** }
  99              		.loc 1 124 1 is_stmt 0 view .LVU9
 100              		@ sp needed
 101 0000 7047     		bx	lr
 102              		.cfi_endproc
 103              	.LFE420:
 105              		.section	.text.SysTick_Handler,"ax",%progbits
 106              		.align	1
 107              		.global	SysTick_Handler
 108              		.syntax unified
 109              		.code	16
 110              		.thumb_func
 111              		.fpu softvfp
 113              	SysTick_Handler:
ARM GAS  /tmp/ccgG6lCU.s 			page 5


 114              	.LFB421:
 125:Core/Src/stm32g0xx_it.c **** 
 126:Core/Src/stm32g0xx_it.c **** /**
 127:Core/Src/stm32g0xx_it.c ****   * @brief This function handles System tick timer.
 128:Core/Src/stm32g0xx_it.c ****   */
 129:Core/Src/stm32g0xx_it.c **** void SysTick_Handler(void)
 130:Core/Src/stm32g0xx_it.c **** {
 115              		.loc 1 130 1 is_stmt 1 view -0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119 0000 10B5     		push	{r4, lr}
 120              	.LCFI0:
 121              		.cfi_def_cfa_offset 8
 122              		.cfi_offset 4, -8
 123              		.cfi_offset 14, -4
 131:Core/Src/stm32g0xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 132:Core/Src/stm32g0xx_it.c **** 
 133:Core/Src/stm32g0xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 134:Core/Src/stm32g0xx_it.c ****   HAL_IncTick();
 124              		.loc 1 134 3 view .LVU11
 125              		.loc 1 134 14 is_stmt 0 view .LVU12
 126 0002 FFF7FEFF 		bl	HAL_IncTick
 127              	.LVL0:
 135:Core/Src/stm32g0xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 136:Core/Src/stm32g0xx_it.c **** 
 137:Core/Src/stm32g0xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 138:Core/Src/stm32g0xx_it.c **** }
 128              		.loc 1 138 1 view .LVU13
 129              		@ sp needed
 130 0006 10BD     		pop	{r4, pc}
 131              		.cfi_endproc
 132              	.LFE421:
 134              		.section	.text.ADC1_IRQHandler,"ax",%progbits
 135              		.align	1
 136              		.global	ADC1_IRQHandler
 137              		.syntax unified
 138              		.code	16
 139              		.thumb_func
 140              		.fpu softvfp
 142              	ADC1_IRQHandler:
 143              	.LFB422:
 139:Core/Src/stm32g0xx_it.c **** 
 140:Core/Src/stm32g0xx_it.c **** /******************************************************************************/
 141:Core/Src/stm32g0xx_it.c **** /* STM32G0xx Peripheral Interrupt Handlers                                    */
 142:Core/Src/stm32g0xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 143:Core/Src/stm32g0xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 144:Core/Src/stm32g0xx_it.c **** /* please refer to the startup file (startup_stm32g0xx.s).                    */
 145:Core/Src/stm32g0xx_it.c **** /******************************************************************************/
 146:Core/Src/stm32g0xx_it.c **** 
 147:Core/Src/stm32g0xx_it.c **** /**
 148:Core/Src/stm32g0xx_it.c ****   * @brief This function handles ADC1 interrupt.
 149:Core/Src/stm32g0xx_it.c ****   */
 150:Core/Src/stm32g0xx_it.c **** void ADC1_IRQHandler(void)
 151:Core/Src/stm32g0xx_it.c **** {
 144              		.loc 1 151 1 is_stmt 1 view -0
 145              		.cfi_startproc
ARM GAS  /tmp/ccgG6lCU.s 			page 6


 146              		@ args = 0, pretend = 0, frame = 0
 147              		@ frame_needed = 0, uses_anonymous_args = 0
 148 0000 10B5     		push	{r4, lr}
 149              	.LCFI1:
 150              		.cfi_def_cfa_offset 8
 151              		.cfi_offset 4, -8
 152              		.cfi_offset 14, -4
 152:Core/Src/stm32g0xx_it.c ****   /* USER CODE BEGIN ADC1_IRQn 0 */
 153:Core/Src/stm32g0xx_it.c **** 
 154:Core/Src/stm32g0xx_it.c ****   /* USER CODE END ADC1_IRQn 0 */
 155:Core/Src/stm32g0xx_it.c ****   HAL_ADC_IRQHandler(&hadc1);
 153              		.loc 1 155 3 view .LVU15
 154              		.loc 1 155 21 is_stmt 0 view .LVU16
 155 0002 0248     		ldr	r0, .L9
 156 0004 FFF7FEFF 		bl	HAL_ADC_IRQHandler
 157              	.LVL1:
 156:Core/Src/stm32g0xx_it.c ****   /* USER CODE BEGIN ADC1_IRQn 1 */
 157:Core/Src/stm32g0xx_it.c **** 
 158:Core/Src/stm32g0xx_it.c ****   /* USER CODE END ADC1_IRQn 1 */
 159:Core/Src/stm32g0xx_it.c **** }
 158              		.loc 1 159 1 view .LVU17
 159              		@ sp needed
 160 0008 10BD     		pop	{r4, pc}
 161              	.L10:
 162 000a C046     		.align	2
 163              	.L9:
 164 000c 00000000 		.word	hadc1
 165              		.cfi_endproc
 166              	.LFE422:
 168              		.section	.text.TIM1_BRK_UP_TRG_COM_IRQHandler,"ax",%progbits
 169              		.align	1
 170              		.global	TIM1_BRK_UP_TRG_COM_IRQHandler
 171              		.syntax unified
 172              		.code	16
 173              		.thumb_func
 174              		.fpu softvfp
 176              	TIM1_BRK_UP_TRG_COM_IRQHandler:
 177              	.LFB423:
 160:Core/Src/stm32g0xx_it.c **** 
 161:Core/Src/stm32g0xx_it.c **** /**
 162:Core/Src/stm32g0xx_it.c ****   * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
 163:Core/Src/stm32g0xx_it.c ****   */
 164:Core/Src/stm32g0xx_it.c **** void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
 165:Core/Src/stm32g0xx_it.c **** {
 178              		.loc 1 165 1 is_stmt 1 view -0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182 0000 10B5     		push	{r4, lr}
 183              	.LCFI2:
 184              		.cfi_def_cfa_offset 8
 185              		.cfi_offset 4, -8
 186              		.cfi_offset 14, -4
 166:Core/Src/stm32g0xx_it.c ****   /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */
 167:Core/Src/stm32g0xx_it.c **** 
 168:Core/Src/stm32g0xx_it.c ****   /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
 169:Core/Src/stm32g0xx_it.c ****   HAL_TIM_IRQHandler(&htim1);
ARM GAS  /tmp/ccgG6lCU.s 			page 7


 187              		.loc 1 169 3 view .LVU19
 188              		.loc 1 169 21 is_stmt 0 view .LVU20
 189 0002 0248     		ldr	r0, .L12
 190 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 191              	.LVL2:
 170:Core/Src/stm32g0xx_it.c ****   /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */
 171:Core/Src/stm32g0xx_it.c **** 
 172:Core/Src/stm32g0xx_it.c ****   /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
 173:Core/Src/stm32g0xx_it.c **** }
 192              		.loc 1 173 1 view .LVU21
 193              		@ sp needed
 194 0008 10BD     		pop	{r4, pc}
 195              	.L13:
 196 000a C046     		.align	2
 197              	.L12:
 198 000c 00000000 		.word	htim1
 199              		.cfi_endproc
 200              	.LFE423:
 202              		.section	.text.TIM1_CC_IRQHandler,"ax",%progbits
 203              		.align	1
 204              		.global	TIM1_CC_IRQHandler
 205              		.syntax unified
 206              		.code	16
 207              		.thumb_func
 208              		.fpu softvfp
 210              	TIM1_CC_IRQHandler:
 211              	.LFB424:
 174:Core/Src/stm32g0xx_it.c **** 
 175:Core/Src/stm32g0xx_it.c **** /**
 176:Core/Src/stm32g0xx_it.c ****   * @brief This function handles TIM1 capture compare interrupt.
 177:Core/Src/stm32g0xx_it.c ****   */
 178:Core/Src/stm32g0xx_it.c **** void TIM1_CC_IRQHandler(void)
 179:Core/Src/stm32g0xx_it.c **** {
 212              		.loc 1 179 1 is_stmt 1 view -0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 0
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216 0000 10B5     		push	{r4, lr}
 217              	.LCFI3:
 218              		.cfi_def_cfa_offset 8
 219              		.cfi_offset 4, -8
 220              		.cfi_offset 14, -4
 180:Core/Src/stm32g0xx_it.c ****   /* USER CODE BEGIN TIM1_CC_IRQn 0 */
 181:Core/Src/stm32g0xx_it.c **** 
 182:Core/Src/stm32g0xx_it.c ****   /* USER CODE END TIM1_CC_IRQn 0 */
 183:Core/Src/stm32g0xx_it.c ****   HAL_TIM_IRQHandler(&htim1);
 221              		.loc 1 183 3 view .LVU23
 222              		.loc 1 183 21 is_stmt 0 view .LVU24
 223 0002 0248     		ldr	r0, .L15
 224 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 225              	.LVL3:
 184:Core/Src/stm32g0xx_it.c ****   /* USER CODE BEGIN TIM1_CC_IRQn 1 */
 185:Core/Src/stm32g0xx_it.c **** 
 186:Core/Src/stm32g0xx_it.c ****   /* USER CODE END TIM1_CC_IRQn 1 */
 187:Core/Src/stm32g0xx_it.c **** }
 226              		.loc 1 187 1 view .LVU25
 227              		@ sp needed
ARM GAS  /tmp/ccgG6lCU.s 			page 8


 228 0008 10BD     		pop	{r4, pc}
 229              	.L16:
 230 000a C046     		.align	2
 231              	.L15:
 232 000c 00000000 		.word	htim1
 233              		.cfi_endproc
 234              	.LFE424:
 236              		.section	.text.SPI1_IRQHandler,"ax",%progbits
 237              		.align	1
 238              		.global	SPI1_IRQHandler
 239              		.syntax unified
 240              		.code	16
 241              		.thumb_func
 242              		.fpu softvfp
 244              	SPI1_IRQHandler:
 245              	.LFB425:
 188:Core/Src/stm32g0xx_it.c **** 
 189:Core/Src/stm32g0xx_it.c **** /**
 190:Core/Src/stm32g0xx_it.c ****   * @brief This function handles SPI1 global interrupt.
 191:Core/Src/stm32g0xx_it.c ****   */
 192:Core/Src/stm32g0xx_it.c **** void SPI1_IRQHandler(void)
 193:Core/Src/stm32g0xx_it.c **** {
 246              		.loc 1 193 1 is_stmt 1 view -0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 0
 249              		@ frame_needed = 0, uses_anonymous_args = 0
 250 0000 10B5     		push	{r4, lr}
 251              	.LCFI4:
 252              		.cfi_def_cfa_offset 8
 253              		.cfi_offset 4, -8
 254              		.cfi_offset 14, -4
 194:Core/Src/stm32g0xx_it.c ****   /* USER CODE BEGIN SPI1_IRQn 0 */
 195:Core/Src/stm32g0xx_it.c **** 
 196:Core/Src/stm32g0xx_it.c ****   /* USER CODE END SPI1_IRQn 0 */
 197:Core/Src/stm32g0xx_it.c ****   HAL_SPI_IRQHandler(&hspi1);
 255              		.loc 1 197 3 view .LVU27
 256              		.loc 1 197 21 is_stmt 0 view .LVU28
 257 0002 0248     		ldr	r0, .L18
 258 0004 FFF7FEFF 		bl	HAL_SPI_IRQHandler
 259              	.LVL4:
 198:Core/Src/stm32g0xx_it.c ****   /* USER CODE BEGIN SPI1_IRQn 1 */
 199:Core/Src/stm32g0xx_it.c **** 
 200:Core/Src/stm32g0xx_it.c ****   /* USER CODE END SPI1_IRQn 1 */
 201:Core/Src/stm32g0xx_it.c **** }
 260              		.loc 1 201 1 view .LVU29
 261              		@ sp needed
 262 0008 10BD     		pop	{r4, pc}
 263              	.L19:
 264 000a C046     		.align	2
 265              	.L18:
 266 000c 00000000 		.word	hspi1
 267              		.cfi_endproc
 268              	.LFE425:
 270              		.section	.text.SPI2_IRQHandler,"ax",%progbits
 271              		.align	1
 272              		.global	SPI2_IRQHandler
 273              		.syntax unified
ARM GAS  /tmp/ccgG6lCU.s 			page 9


 274              		.code	16
 275              		.thumb_func
 276              		.fpu softvfp
 278              	SPI2_IRQHandler:
 279              	.LFB426:
 202:Core/Src/stm32g0xx_it.c **** 
 203:Core/Src/stm32g0xx_it.c **** /**
 204:Core/Src/stm32g0xx_it.c ****   * @brief This function handles SPI2 global interrupt.
 205:Core/Src/stm32g0xx_it.c ****   */
 206:Core/Src/stm32g0xx_it.c **** void SPI2_IRQHandler(void)
 207:Core/Src/stm32g0xx_it.c **** {
 280              		.loc 1 207 1 is_stmt 1 view -0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 0
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284 0000 10B5     		push	{r4, lr}
 285              	.LCFI5:
 286              		.cfi_def_cfa_offset 8
 287              		.cfi_offset 4, -8
 288              		.cfi_offset 14, -4
 208:Core/Src/stm32g0xx_it.c ****   /* USER CODE BEGIN SPI2_IRQn 0 */
 209:Core/Src/stm32g0xx_it.c **** 
 210:Core/Src/stm32g0xx_it.c ****   /* USER CODE END SPI2_IRQn 0 */
 211:Core/Src/stm32g0xx_it.c ****   HAL_SPI_IRQHandler(&hspi2);
 289              		.loc 1 211 3 view .LVU31
 290              		.loc 1 211 21 is_stmt 0 view .LVU32
 291 0002 0248     		ldr	r0, .L21
 292 0004 FFF7FEFF 		bl	HAL_SPI_IRQHandler
 293              	.LVL5:
 212:Core/Src/stm32g0xx_it.c ****   /* USER CODE BEGIN SPI2_IRQn 1 */
 213:Core/Src/stm32g0xx_it.c **** 
 214:Core/Src/stm32g0xx_it.c ****   /* USER CODE END SPI2_IRQn 1 */
 215:Core/Src/stm32g0xx_it.c **** }
 294              		.loc 1 215 1 view .LVU33
 295              		@ sp needed
 296 0008 10BD     		pop	{r4, pc}
 297              	.L22:
 298 000a C046     		.align	2
 299              	.L21:
 300 000c 00000000 		.word	hspi2
 301              		.cfi_endproc
 302              	.LFE426:
 304              		.text
 305              	.Letext0:
 306              		.file 2 "/home/robert/gcc-arm-none-eabi-10.3-2021.07/arm-none-eabi/include/machine/_default_types.
 307              		.file 3 "/home/robert/gcc-arm-none-eabi-10.3-2021.07/arm-none-eabi/include/sys/_stdint.h"
 308              		.file 4 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/stm32g030xx.h"
 309              		.file 5 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/stm32g0xx.h"
 310              		.file 6 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_def.h"
 311              		.file 7 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_dma.h"
 312              		.file 8 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_adc.h"
 313              		.file 9 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_spi.h"
 314              		.file 10 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_tim.h"
 315              		.file 11 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal.h"
 316              		.file 12 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h"
ARM GAS  /tmp/ccgG6lCU.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32g0xx_it.c
     /tmp/ccgG6lCU.s:16     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccgG6lCU.s:24     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccgG6lCU.s:41     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccgG6lCU.s:48     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccgG6lCU.s:64     .text.SVC_Handler:0000000000000000 $t
     /tmp/ccgG6lCU.s:71     .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccgG6lCU.s:85     .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccgG6lCU.s:92     .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccgG6lCU.s:106    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccgG6lCU.s:113    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccgG6lCU.s:135    .text.ADC1_IRQHandler:0000000000000000 $t
     /tmp/ccgG6lCU.s:142    .text.ADC1_IRQHandler:0000000000000000 ADC1_IRQHandler
     /tmp/ccgG6lCU.s:164    .text.ADC1_IRQHandler:000000000000000c $d
     /tmp/ccgG6lCU.s:169    .text.TIM1_BRK_UP_TRG_COM_IRQHandler:0000000000000000 $t
     /tmp/ccgG6lCU.s:176    .text.TIM1_BRK_UP_TRG_COM_IRQHandler:0000000000000000 TIM1_BRK_UP_TRG_COM_IRQHandler
     /tmp/ccgG6lCU.s:198    .text.TIM1_BRK_UP_TRG_COM_IRQHandler:000000000000000c $d
     /tmp/ccgG6lCU.s:203    .text.TIM1_CC_IRQHandler:0000000000000000 $t
     /tmp/ccgG6lCU.s:210    .text.TIM1_CC_IRQHandler:0000000000000000 TIM1_CC_IRQHandler
     /tmp/ccgG6lCU.s:232    .text.TIM1_CC_IRQHandler:000000000000000c $d
     /tmp/ccgG6lCU.s:237    .text.SPI1_IRQHandler:0000000000000000 $t
     /tmp/ccgG6lCU.s:244    .text.SPI1_IRQHandler:0000000000000000 SPI1_IRQHandler
     /tmp/ccgG6lCU.s:266    .text.SPI1_IRQHandler:000000000000000c $d
     /tmp/ccgG6lCU.s:271    .text.SPI2_IRQHandler:0000000000000000 $t
     /tmp/ccgG6lCU.s:278    .text.SPI2_IRQHandler:0000000000000000 SPI2_IRQHandler
     /tmp/ccgG6lCU.s:300    .text.SPI2_IRQHandler:000000000000000c $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_ADC_IRQHandler
hadc1
HAL_TIM_IRQHandler
htim1
HAL_SPI_IRQHandler
hspi1
hspi2
